// "use client"; 클라디언트 모드로 개발할래
import localFont from "next/font/local";
import "./globals.css";
import Link from "next/link";
import Image from "next/image";
import Control from "./read/[id]/Control";
// import { useEffect, useState } from "react";

/* 
const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});
*/



export const metadata = {
  title: "Web tutorials",
  description: "Generated by Green",
};

export default async function RootLayout({ children }) {

  /*
  client 컴포넌트에서 데이터 조회
  / topics에 있는 걸 배열에 담아서 출력하겠다
  const [topics, setTopics] = useState([]);

  / 서버와 통신 후 출력한다고 하면 useEffect 사용해야 함
  useEffect(()=>{

    fetch('http://localhost:9999/topics')
    .then(res=>{
       return res.json();//json->object
    })
    .then(result=>{
      setTopics(result);
    });

  },[])
  console.log(topics); // topics에 목록이 있는지 확인
  */

  // await를 사용하려면 부모에 async가 있어야 함
  // 서버형 컴포넌트에서 데이터 조회
  const response = await fetch(process.env.NEXT_PUBLIC_API_URL+'topics');
  const topics = await response.json(); // json -> object


  return (
    <html lang="en">
      {/* <body className={`${geistSans.variable} ${geistMono.variable}`}>
        {children}
      </body> */}
       <body>
        <h1>
          <Image src="/home_google_icon.png" alt="home icon" width={48} height={48}></Image>
          <Link href="/">WEB</Link>
        </h1>
        <nav>
          <ol>
          {
              topics.map(topic=> <li key={topic.id}><Link href={`/read/${topic.id}`}>{topic.title}</Link></li> )
            }
            {/* <li><Link href="/read/1">html</Link></li>
            <li><Link href="/read/2">css</Link></li>
            <li><Link href="/read/3">javascript</Link></li> */}
          </ol>
        </nav>
        {children}
        <Control />        
      </body>
    </html>
  );
}